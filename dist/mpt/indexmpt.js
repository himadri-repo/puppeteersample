"use strict";

var _mptcrwler = require("./mptcrwler");

//jshint esversion: 6
var cron = require("node-cron");

var express = require("express");

var fs = require("fs");

var datstore = require('../../radharani/mptdatastore'); //require("babel-core/register");
//require("babel-polyfill");


var uuidv4 = require('uuid/v4');

var moment = require('moment');

//import { loggers } from 'winston';
var app = express();

function login() {
  _mptcrwler.Logger.log('info', "Logging in ...");

  var mptcrawler = new _mptcrwler.MPTCrawler({
    url: '',
    output: 'json'
  });
  var response = mptcrawler.getData({
    url: 'https://fd.metropolitantravels.com/api/flights?_=1557470967694',
    data: {
      email: "info@oxytra.com",
      pwd: "Sumit@12356"
    }
  });
  response.then(function (data) {
    _mptcrwler.Logger.log("info", JSON.stringify(data.result));

    _mptcrwler.Logger.log('info', JSON.stringify(mptcrawler.finalData));

    var token = data.result.token;
    startProcess(token); //let runid = `${uuidv4()}_${moment().format("DD-MMM-YYYY HH:mm:ss.SSS")}`;
  })["catch"](function (error) {
    _mptcrwler.Logger.log("error", error);
  });
}

function startProcess(token) {
  _mptcrwler.Logger.log('info', "Starting process ...");

  var mptcrawler = new _mptcrwler.MPTCrawler({
    url: '',
    output: 'json',
    token: token
  });
  var response = mptcrawler.getData({
    url: 'https://fd.metropolitantravels.com/api/flights?_=1557470967694',
    data: {
      usrId: 109,
      usrType: "N"
    },
    token: token
  });
  response.then(function (data) {
    _mptcrwler.Logger.log("info", JSON.stringify(data.result));

    _mptcrwler.Logger.log('info', JSON.stringify(mptcrawler.finalData));

    var runid = "".concat(uuidv4(), "_").concat(moment().format("DD-MMM-YYYY HH:mm:ss.SSS"));
    datstore.saveCircleBatchData(runid, mptcrawler.finalData, "", function (rrid) {
      datstore.finalization(rrid, function () {
        _mptcrwler.Logger.log('info', 'Finished');

        process.removeAllListeners("unhandledRejection");
        process.removeAllListeners('exit');
        process.removeAllListeners();
        return;
      });
      return;
    });
  })["catch"](function (error) {
    _mptcrwler.Logger.log("error", error);
  });
}

var excutionStarted = false; // cron.schedule("*/20 * * * *", function() {
//     Logger.log("info", "Cron started");
//     if(excutionStarted) {
//         Logger.log("info", 'Previous process still running ...');
//         return false;
//     }

try {
  excutionStarted = true;
  process.on('unhandledRejection', function (reason, promise) {
    _mptcrwler.Logger.log('info', 'Unhandled Rejection at:', reason);
  });
  startProcess(); //login();
} catch (e) {
  _mptcrwler.Logger.log('error', e);
} finally {
  excutionStarted = false;
} // });
// app.listen("3236");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,