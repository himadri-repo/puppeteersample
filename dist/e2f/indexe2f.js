"use strict";

var _e2fcrwler = require("./e2fcrwler");

//jshint esversion: 6
var cron = require("node-cron");

var express = require("express");

var fs = require("fs");

var datstore = require('../../radharani/e2fdatastore'); //require("babel-core/register");
//require("babel-polyfill");


var uuidv4 = require('uuid/v4');

var moment = require('moment');

//import { loggers } from 'winston';
var app = express();

function startProcess() {
  _e2fcrwler.Logger.log('info', "Starting process ...");

  var e2fcrawler = new _e2fcrwler.E2FCrawler({
    url: '',
    output: 'json'
  });
  var response = e2fcrawler.postData({
    url: 'https://expressdev.ease2fly.com/api/destinations/get-destinations-list',
    data: {
      usrId: 109,
      usrType: "N"
    }
  });
  response.then(function (data) {
    _e2fcrwler.Logger.log("info", JSON.stringify(data.result));

    _e2fcrwler.Logger.log('info', JSON.stringify(e2fcrawler.finalData));

    var runid = "".concat(uuidv4(), "_").concat(moment().format("DD-MMM-YYYY HH:mm:ss.SSS"));
    datstore.saveCircleBatchData(runid, e2fcrawler.finalData, "", function (rrid) {
      datstore.finalization(rrid, function () {
        _e2fcrwler.Logger.log('info', 'Finished');

        process.removeAllListeners("unhandledRejection");
        process.removeAllListeners('exit');
        process.removeAllListeners();
        return;
      });
      return;
    });
  }).catch(function (error) {
    _e2fcrwler.Logger.log("error", error);
  });
}

var excutionStarted = false; // cron.schedule("*/10 * * * *", function() {
//     Logger.log("info", "Cron started");
//     if(excutionStarted) {
//         Logger.log("info", 'Previous process still running ...');
//         return false;
//     }

try {
  excutionStarted = true;
  process.on('unhandledRejection', function (reason, promise) {
    _e2fcrwler.Logger.log('info', 'Unhandled Rejection at:', reason);
  });
  startProcess();
} catch (e) {
  _e2fcrwler.Logger.log('error', e);
} finally {
  excutionStarted = false;
} // });
// app.listen("3232");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lMmYvaW5kZXhlMmYuanMiXSwibmFtZXMiOlsiY3JvbiIsInJlcXVpcmUiLCJleHByZXNzIiwiZnMiLCJkYXRzdG9yZSIsInV1aWR2NCIsIm1vbWVudCIsImFwcCIsInN0YXJ0UHJvY2VzcyIsIkxvZ2dlciIsImxvZyIsImUyZmNyYXdsZXIiLCJFMkZDcmF3bGVyIiwidXJsIiwib3V0cHV0IiwicmVzcG9uc2UiLCJwb3N0RGF0YSIsImRhdGEiLCJ1c3JJZCIsInVzclR5cGUiLCJ0aGVuIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3VsdCIsImZpbmFsRGF0YSIsInJ1bmlkIiwiZm9ybWF0Iiwic2F2ZUNpcmNsZUJhdGNoRGF0YSIsInJyaWQiLCJmaW5hbGl6YXRpb24iLCJwcm9jZXNzIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiY2F0Y2giLCJlcnJvciIsImV4Y3V0aW9uU3RhcnRlZCIsIm9uIiwicmVhc29uIiwicHJvbWlzZSIsImUiXSwibWFwcGluZ3MiOiI7O0FBV0E7O0FBWEE7QUFDQSxJQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXBCOztBQUNBLElBQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsSUFBTUUsRUFBRSxHQUFHRixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxJQUFNRyxRQUFRLEdBQUdILE9BQU8sQ0FBQyw4QkFBRCxDQUF4QixDLENBQ0E7QUFDQTs7O0FBRUEsSUFBTUksTUFBTSxHQUFHSixPQUFPLENBQUMsU0FBRCxDQUF0Qjs7QUFDQSxJQUFNSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUdBO0FBRUEsSUFBSU0sR0FBRyxHQUFHTCxPQUFPLEVBQWpCOztBQUVBLFNBQVNNLFlBQVQsR0FBd0I7QUFDcEJDLG9CQUFPQyxHQUFQLENBQVcsTUFBWCxFQUFtQixzQkFBbkI7O0FBRUEsTUFBSUMsVUFBVSxHQUFHLElBQUlDLHFCQUFKLENBQWU7QUFBQ0MsSUFBQUEsR0FBRyxFQUFFLEVBQU47QUFBVUMsSUFBQUEsTUFBTSxFQUFFO0FBQWxCLEdBQWYsQ0FBakI7QUFDQSxNQUFJQyxRQUFRLEdBQUdKLFVBQVUsQ0FBQ0ssUUFBWCxDQUFvQjtBQUFDSCxJQUFBQSxHQUFHLEVBQUUsd0VBQU47QUFBZ0ZJLElBQUFBLElBQUksRUFBRTtBQUNySEMsTUFBQUEsS0FBSyxFQUFFLEdBRDhHO0FBRXJIQyxNQUFBQSxPQUFPLEVBQUU7QUFGNEc7QUFBdEYsR0FBcEIsQ0FBZjtBQUtBSixFQUFBQSxRQUFRLENBQUNLLElBQVQsQ0FBYyxVQUFBSCxJQUFJLEVBQUk7QUFDbEJSLHNCQUFPQyxHQUFQLENBQVcsTUFBWCxFQUFtQlcsSUFBSSxDQUFDQyxTQUFMLENBQWVMLElBQUksQ0FBQ00sTUFBcEIsQ0FBbkI7O0FBRUFkLHNCQUFPQyxHQUFQLENBQVcsTUFBWCxFQUFtQlcsSUFBSSxDQUFDQyxTQUFMLENBQWVYLFVBQVUsQ0FBQ2EsU0FBMUIsQ0FBbkI7O0FBRUEsUUFBSUMsS0FBSyxhQUFNcEIsTUFBTSxFQUFaLGNBQWtCQyxNQUFNLEdBQUdvQixNQUFULENBQWdCLDBCQUFoQixDQUFsQixDQUFUO0FBQ0F0QixJQUFBQSxRQUFRLENBQUN1QixtQkFBVCxDQUE2QkYsS0FBN0IsRUFBb0NkLFVBQVUsQ0FBQ2EsU0FBL0MsRUFBMEQsRUFBMUQsRUFBOEQsVUFBU0ksSUFBVCxFQUFlO0FBQ3pFeEIsTUFBQUEsUUFBUSxDQUFDeUIsWUFBVCxDQUFzQkQsSUFBdEIsRUFBNEIsWUFBTTtBQUM5Qm5CLDBCQUFPQyxHQUFQLENBQVcsTUFBWCxFQUFtQixVQUFuQjs7QUFFQW9CLFFBQUFBLE9BQU8sQ0FBQ0Msa0JBQVIsQ0FBMkIsb0JBQTNCO0FBQ0FELFFBQUFBLE9BQU8sQ0FBQ0Msa0JBQVIsQ0FBMkIsTUFBM0I7QUFDQUQsUUFBQUEsT0FBTyxDQUFDQyxrQkFBUjtBQUNBO0FBQ0gsT0FQRDtBQVFBO0FBQ0gsS0FWRDtBQVdILEdBakJELEVBaUJHQyxLQWpCSCxDQWlCUyxVQUFBQyxLQUFLLEVBQUk7QUFDZHhCLHNCQUFPQyxHQUFQLENBQVcsT0FBWCxFQUFvQnVCLEtBQXBCO0FBQ0gsR0FuQkQ7QUFvQkg7O0FBRUQsSUFBSUMsZUFBZSxHQUFHLEtBQXRCLEMsQ0FDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUksSUFDQTtBQUNJQSxFQUFBQSxlQUFlLEdBQUcsSUFBbEI7QUFDQUosRUFBQUEsT0FBTyxDQUFDSyxFQUFSLENBQVcsb0JBQVgsRUFBaUMsVUFBQ0MsTUFBRCxFQUFTQyxPQUFULEVBQXFCO0FBQ2xENUIsc0JBQU9DLEdBQVAsQ0FBVyxNQUFYLEVBQWtCLHlCQUFsQixFQUE2QzBCLE1BQTdDO0FBQ0gsR0FGRDtBQUdBNUIsRUFBQUEsWUFBWTtBQUNmLENBUEQsQ0FRQSxPQUFNOEIsQ0FBTixFQUFTO0FBQ0w3QixvQkFBT0MsR0FBUCxDQUFXLE9BQVgsRUFBb0I0QixDQUFwQjtBQUNILENBVkQsU0FXUTtBQUNKSixFQUFBQSxlQUFlLEdBQUcsS0FBbEI7QUFDSCxDLENBQ0w7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbIi8vanNoaW50IGVzdmVyc2lvbjogNlxyXG5jb25zdCBjcm9uID0gcmVxdWlyZShcIm5vZGUtY3JvblwiKTtcclxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuY29uc3QgZGF0c3RvcmUgPSByZXF1aXJlKCcuLi8uLi9yYWRoYXJhbmkvZTJmZGF0YXN0b3JlJyk7XHJcbi8vcmVxdWlyZShcImJhYmVsLWNvcmUvcmVnaXN0ZXJcIik7XHJcbi8vcmVxdWlyZShcImJhYmVsLXBvbHlmaWxsXCIpO1xyXG5cclxuY29uc3QgdXVpZHY0ID0gcmVxdWlyZSgndXVpZC92NCcpO1xyXG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcclxuXHJcbmltcG9ydCB7TG9nZ2VyLCBFMkZDcmF3bGVyfSBmcm9tICcuL2UyZmNyd2xlcic7XHJcbi8vaW1wb3J0IHsgbG9nZ2VycyB9IGZyb20gJ3dpbnN0b24nO1xyXG5cclxubGV0IGFwcCA9IGV4cHJlc3MoKTtcclxuXHJcbmZ1bmN0aW9uIHN0YXJ0UHJvY2VzcygpIHtcclxuICAgIExvZ2dlci5sb2coJ2luZm8nLCBcIlN0YXJ0aW5nIHByb2Nlc3MgLi4uXCIpO1xyXG5cclxuICAgIGxldCBlMmZjcmF3bGVyID0gbmV3IEUyRkNyYXdsZXIoe3VybDogJycsIG91dHB1dDogJ2pzb24nfSk7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBlMmZjcmF3bGVyLnBvc3REYXRhKHt1cmw6ICdodHRwczovL2V4cHJlc3NkZXYuZWFzZTJmbHkuY29tL2FwaS9kZXN0aW5hdGlvbnMvZ2V0LWRlc3RpbmF0aW9ucy1saXN0JywgZGF0YToge1xyXG4gICAgICAgIHVzcklkOiAxMDksXHJcbiAgICAgICAgdXNyVHlwZTogXCJOXCJcclxuICAgIH19KTtcclxuXHJcbiAgICByZXNwb25zZS50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIExvZ2dlci5sb2coXCJpbmZvXCIsIEpTT04uc3RyaW5naWZ5KGRhdGEucmVzdWx0KSk7XHJcblxyXG4gICAgICAgIExvZ2dlci5sb2coJ2luZm8nLCBKU09OLnN0cmluZ2lmeShlMmZjcmF3bGVyLmZpbmFsRGF0YSkpO1xyXG5cclxuICAgICAgICBsZXQgcnVuaWQgPSBgJHt1dWlkdjQoKX1fJHttb21lbnQoKS5mb3JtYXQoXCJERC1NTU0tWVlZWSBISDptbTpzcy5TU1NcIil9YDtcclxuICAgICAgICBkYXRzdG9yZS5zYXZlQ2lyY2xlQmF0Y2hEYXRhKHJ1bmlkLCBlMmZjcmF3bGVyLmZpbmFsRGF0YSwgXCJcIiwgZnVuY3Rpb24ocnJpZCkge1xyXG4gICAgICAgICAgICBkYXRzdG9yZS5maW5hbGl6YXRpb24ocnJpZCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmxvZygnaW5mbycsICdGaW5pc2hlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2V4aXQnKTtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgTG9nZ2VyLmxvZyhcImVycm9yXCIsIGVycm9yKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG52YXIgZXhjdXRpb25TdGFydGVkID0gZmFsc2U7XHJcbi8vIGNyb24uc2NoZWR1bGUoXCIqLzEwICogKiAqICpcIiwgZnVuY3Rpb24oKSB7XHJcbi8vICAgICBMb2dnZXIubG9nKFwiaW5mb1wiLCBcIkNyb24gc3RhcnRlZFwiKTtcclxuLy8gICAgIGlmKGV4Y3V0aW9uU3RhcnRlZCkge1xyXG4vLyAgICAgICAgIExvZ2dlci5sb2coXCJpbmZvXCIsICdQcmV2aW91cyBwcm9jZXNzIHN0aWxsIHJ1bm5pbmcgLi4uJyk7XHJcbi8vICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4vLyAgICAgfVxyXG5cclxuICAgIHRyeVxyXG4gICAge1xyXG4gICAgICAgIGV4Y3V0aW9uU3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgKHJlYXNvbiwgcHJvbWlzZSkgPT4ge1xyXG4gICAgICAgICAgICBMb2dnZXIubG9nKCdpbmZvJywnVW5oYW5kbGVkIFJlamVjdGlvbiBhdDonLCByZWFzb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN0YXJ0UHJvY2VzcygpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2goZSkge1xyXG4gICAgICAgIExvZ2dlci5sb2coJ2Vycm9yJywgZSk7XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICBleGN1dGlvblN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBhcHAubGlzdGVuKFwiMzIzMlwiKTtcclxuIl19