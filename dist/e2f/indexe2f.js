"use strict";

var _e2fcrwler = require("./e2fcrwler");

//jshint esversion: 6
var cron = require("node-cron");

var express = require("express");

var fs = require("fs");

var datstore = require('../../radharani/e2fdatastore'); //require("babel-core/register");
//require("babel-polyfill");


var uuidv4 = require('uuid/v4');

var moment = require('moment');

//import { loggers } from 'winston';
var app = express();

function login() {
  _e2fcrwler.Logger.log('info', "Logging in ...");

  var e2fcrawler = new _e2fcrwler.E2FCrawler({
    url: '',
    output: 'json'
  });
  var response = e2fcrawler.postData({
    url: 'https://eflyapi.ease2fly.com/api/auth/login',
    data: {
      email: "info@oxytra.com",
      pwd: "Sumit@12356"
    }
  });
  response.then(function (data) {
    _e2fcrwler.Logger.log("info", JSON.stringify(data.result));

    _e2fcrwler.Logger.log('info', JSON.stringify(e2fcrawler.finalData));

    var token = data.result.token;
    startProcess(token); //let runid = `${uuidv4()}_${moment().format("DD-MMM-YYYY HH:mm:ss.SSS")}`;
  })["catch"](function (error) {
    _e2fcrwler.Logger.log("error", error);
  });
}

function startProcess(token) {
  _e2fcrwler.Logger.log('info', "Starting process ...");

  var e2fcrawler = new _e2fcrwler.E2FCrawler({
    url: '',
    output: 'json',
    token: token
  });
  var response = e2fcrawler.postData({
    url: 'https://eflyapi.ease2fly.com/api/destinations/get-destinations-list',
    data: {
      usrId: 109,
      usrType: "N"
    },
    token: token
  });
  response.then(function (data) {
    _e2fcrwler.Logger.log("info", JSON.stringify(data.result));

    _e2fcrwler.Logger.log('info', JSON.stringify(e2fcrawler.finalData));

    var runid = "".concat(uuidv4(), "_").concat(moment().format("DD-MMM-YYYY HH:mm:ss.SSS"));
    datstore.saveCircleBatchData(runid, e2fcrawler.finalData, "", function (rrid) {
      datstore.finalization(rrid, function () {
        _e2fcrwler.Logger.log('info', 'Finished');

        process.removeAllListeners("unhandledRejection");
        process.removeAllListeners('exit');
        process.removeAllListeners();
        return;
      });
      return;
    });
  })["catch"](function (error) {
    _e2fcrwler.Logger.log("error", error);
  });
}

var excutionStarted = false; // cron.schedule("*/20 * * * *", function() {
//     Logger.log("info", "Cron started");
//     if(excutionStarted) {
//         Logger.log("info", 'Previous process still running ...');
//         return false;
//     }

try {
  excutionStarted = true;
  process.on('unhandledRejection', function (reason, promise) {
    _e2fcrwler.Logger.log('info', 'Unhandled Rejection at:', reason);
  }); //startProcess();

  login();
} catch (e) {
  _e2fcrwler.Logger.log('error', e);
} finally {
  excutionStarted = false;
} // });
// app.listen("3232");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lMmYvaW5kZXhlMmYuanMiXSwibmFtZXMiOlsiY3JvbiIsInJlcXVpcmUiLCJleHByZXNzIiwiZnMiLCJkYXRzdG9yZSIsInV1aWR2NCIsIm1vbWVudCIsImFwcCIsImxvZ2luIiwiTG9nZ2VyIiwibG9nIiwiZTJmY3Jhd2xlciIsIkUyRkNyYXdsZXIiLCJ1cmwiLCJvdXRwdXQiLCJyZXNwb25zZSIsInBvc3REYXRhIiwiZGF0YSIsImVtYWlsIiwicHdkIiwidGhlbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXN1bHQiLCJmaW5hbERhdGEiLCJ0b2tlbiIsInN0YXJ0UHJvY2VzcyIsImVycm9yIiwidXNySWQiLCJ1c3JUeXBlIiwicnVuaWQiLCJmb3JtYXQiLCJzYXZlQ2lyY2xlQmF0Y2hEYXRhIiwicnJpZCIsImZpbmFsaXphdGlvbiIsInByb2Nlc3MiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJleGN1dGlvblN0YXJ0ZWQiLCJvbiIsInJlYXNvbiIsInByb21pc2UiLCJlIl0sIm1hcHBpbmdzIjoiOztBQVdBOztBQVhBO0FBQ0EsSUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUFwQjs7QUFDQSxJQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLElBQU1FLEVBQUUsR0FBR0YsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsSUFBTUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsOEJBQUQsQ0FBeEIsQyxDQUNBO0FBQ0E7OztBQUVBLElBQU1JLE1BQU0sR0FBR0osT0FBTyxDQUFDLFNBQUQsQ0FBdEI7O0FBQ0EsSUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUMsUUFBRCxDQUF0Qjs7QUFHQTtBQUVBLElBQUlNLEdBQUcsR0FBR0wsT0FBTyxFQUFqQjs7QUFFQSxTQUFTTSxLQUFULEdBQWlCO0FBQ2JDLG9CQUFPQyxHQUFQLENBQVcsTUFBWCxFQUFtQixnQkFBbkI7O0FBRUEsTUFBSUMsVUFBVSxHQUFHLElB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QUlVLGVBQWUsR0FBRyxLQUF0QixDLENBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVJLElBQ0E7QUFDSUEsRUFBQUEsZUFBZSxHQUFHLElBQWxCO0FBQ0FGLEVBQUFBLE9BQU8sQ0FBQ0csRUFBUixDQUFXLG9CQUFYLEVBQWlDLFVBQUNDLE1BQUQsRUFBU0MsT0FBVCxFQUFxQjtBQUNsRC9CLHNCQUFPQyxHQUFQLENBQVcsTUFBWCxFQUFrQix5QkFBbEIsRUFBNkM2QixNQUE3QztBQUNILEdBRkQsRUFGSixDQUtJOztBQUNBL0IsRUFBQUEsS0FBSztBQUNSLENBUkQsQ0FTQSxPQUFNaUMsQ0FBTixFQUFTO0FBQ0xoQyxvQkFBT0MsR0FBUCxDQUFXLE9BQVgsRUFBb0IrQixDQUFwQjtBQUNILENBWEQsU0FZUTtBQUNKSixFQUFBQSxlQUFlLEdBQUcsS0FBbEI7QUFDSCxDLENBQ0w7QUFFQSIsInNvdXJjZXNDb250ZW50IjpbIi8vanNoaW50IGVzdmVyc2lvbjogNlxuY29uc3QgY3JvbiA9IHJlcXVpcmUoXCJub2RlLWNyb25cIik7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZShcImV4cHJlc3NcIik7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGRhdHN0b3JlID0gcmVxdWlyZSgnLi4vLi4vcmFkaGFyYW5pL2UyZmRhdGFzdG9yZScpO1xuLy9yZXF1aXJlKFwiYmFiZWwtY29yZS9yZWdpc3RlclwiKTtcbi8vcmVxdWlyZShcImJhYmVsLXBvbHlmaWxsXCIpO1xuXG5jb25zdCB1dWlkdjQgPSByZXF1aXJlKCd1dWlkL3Y0Jyk7XG5jb25zdCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcblxuaW1wb3J0IHtMb2dnZXIsIEUyRkNyYXdsZXJ9IGZyb20gJy4vZTJmY3J3bGVyJztcbi8vaW1wb3J0IHsgbG9nZ2VycyB9IGZyb20gJ3dpbnN0b24nO1xuXG5sZXQgYXBwID0gZXhwcmVzcygpO1xuXG5mdW5jdGlvbiBsb2dpbigpIHtcbiAgICBMb2dnZXIubG9nKCdpbmZvJywgXCJMb2dnaW5nIGluIC4uLlwiKTtcblxuICAgIGxldCBlMmZjcmF3bGVyID0gbmV3IEUyRkNyYXdsZXIoe3VybDogJycsIG91dHB1dDogJ2pzb24nfSk7XG4gICAgbGV0IHJlc3BvbnNlID0gZTJmY3Jhd2xlci5wb3N0RGF0YSh7dXJsOiAnaHR0cHM6Ly9lZmx5YXBpLmVhc2UyZmx5LmNvbS9hcGkvYXV0aC9sb2dpbicsIGRhdGE6IHtcbiAgICAgICAgZW1haWw6XCJpbmZvQG94eXRyYS5jb21cIixcbiAgICAgICAgcHdkOlwiU3VtaXRAMTIzNTZcIlxuICAgIH19KTtcblxuICAgIHJlc3BvbnNlLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIExvZ2dlci5sb2coXCJpbmZvXCIsIEpTT04uc3RyaW5naWZ5KGRhdGEucmVzdWx0KSk7XG4gICAgICAgIExvZ2dlci5sb2coJ2luZm8nLCBKU09OLnN0cmluZ2lmeShlMmZjcmF3bGVyLmZpbmFsRGF0YSkpO1xuXG4gICAgICAgIGxldCB0b2tlbiA9IGRhdGEucmVzdWx0LnRva2VuO1xuICAgICAgICBzdGFydFByb2Nlc3ModG9rZW4pO1xuICAgICAgICAvL2xldCBydW5pZCA9IGAke3V1aWR2NCgpfV8ke21vbWVudCgpLmZvcm1hdChcIkRELU1NTS1ZWVlZIEhIOm1tOnNzLlNTU1wiKX1gO1xuICAgIH0pXG4gICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgTG9nZ2VyLmxvZyhcImVycm9yXCIsIGVycm9yKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc3RhcnRQcm9jZXNzKHRva2VuKSB7XG4gICAgTG9nZ2VyLmxvZygnaW5mbycsIFwiU3RhcnRpbmcgcHJvY2VzcyAuLi5cIik7XG5cbiAgICBsZXQgZTJmY3Jhd2xlciA9IG5ldyBFMkZDcmF3bGVyKHt1cmw6ICcnLCBvdXRwdXQ6ICdqc29uJywgdG9rZW46IHRva2VufSk7XG4gICAgbGV0IHJlc3BvbnNlID0gZTJmY3Jhd2xlci5wb3N0RGF0YSh7dXJsOiAnaHR0cHM6Ly9lZmx5YXBpLmVhc2UyZmx5LmNvbS9hcGkvZGVzdGluYXRpb25zL2dldC1kZXN0aW5hdGlvbnMtbGlzdCcsIGRhdGE6IHtcbiAgICAgICAgdXNySWQ6IDEwOSxcbiAgICAgICAgdXNyVHlwZTogXCJOXCJcbiAgICB9LCB0b2tlbjogdG9rZW59KTtcblxuICAgIHJlc3BvbnNlLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIExvZ2dlci5sb2coXCJpbmZvXCIsIEpTT04uc3RyaW5naWZ5KGRhdGEucmVzdWx0KSk7XG5cbiAgICAgICAgTG9nZ2VyLmxvZygnaW5mbycsIEpTT04uc3RyaW5naWZ5KGUyZmNyYXdsZXIuZmluYWxEYXRhKSk7XG5cbiAgICAgICAgbGV0IHJ1bmlkID0gYCR7dXVpZHY0KCl9XyR7bW9tZW50KCkuZm9ybWF0KFwiREQtTU1NLVlZWVkgSEg6bW06c3MuU1NTXCIpfWA7XG4gICAgICAgIGRhdHN0b3JlLnNhdmVDaXJjbGVCYXRjaERhdGEocnVuaWQsIGUyZmNyYXdsZXIuZmluYWxEYXRhLCBcIlwiLCBmdW5jdGlvbihycmlkKSB7XG4gICAgICAgICAgICBkYXRzdG9yZS5maW5hbGl6YXRpb24ocnJpZCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIExvZ2dlci5sb2coJ2luZm8nLCAnRmluaXNoZWQnKTtcblxuICAgICAgICAgICAgICAgIHByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzKCdleGl0Jyk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBMb2dnZXIubG9nKFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgIH0pO1xufVxuXG52YXIgZXhjdXRpb25TdGFydGVkID0gZmFsc2U7XG4vLyBjcm9uLnNjaGVkdWxlKFwiKi8yMCAqICogKiAqXCIsIGZ1bmN0aW9uKCkge1xuLy8gICAgIExvZ2dlci5sb2coXCJpbmZvXCIsIFwiQ3JvbiBzdGFydGVkXCIpO1xuLy8gICAgIGlmKGV4Y3V0aW9uU3RhcnRlZCkge1xuLy8gICAgICAgICBMb2dnZXIubG9nKFwiaW5mb1wiLCAnUHJldmlvdXMgcHJvY2VzcyBzdGlsbCBydW5uaW5nIC4uLicpO1xuLy8gICAgICAgICByZXR1cm4gZmFsc2U7XG4vLyAgICAgfVxuXG4gICAgdHJ5XG4gICAge1xuICAgICAgICBleGN1dGlvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAocmVhc29uLCBwcm9taXNlKSA9PiB7XG4gICAgICAgICAgICBMb2dnZXIubG9nKCdpbmZvJywnVW5oYW5kbGVkIFJlamVjdGlvbiBhdDonLCByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy9zdGFydFByb2Nlc3MoKTtcbiAgICAgICAgbG9naW4oKTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgICBMb2dnZXIubG9nKCdlcnJvcicsIGUpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgZXhjdXRpb25TdGFydGVkID0gZmFsc2U7XG4gICAgfVxuLy8gfSk7XG5cbi8vIGFwcC5saXN0ZW4oXCIzMjMyXCIpO1xuIl19