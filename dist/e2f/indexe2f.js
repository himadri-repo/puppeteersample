"use strict";

var _e2fcrwler = require("./e2fcrwler");

//jshint esversion: 6
var cron = require("node-cron");

var express = require("express");

var fs = require("fs");

var datstore = require('../../radharani/e2fdatastore'); //require("babel-core/register");
//require("babel-polyfill");


var uuidv4 = require('uuid/v4');

var moment = require('moment');

//import { loggers } from 'winston';
var app = express();

function login() {
  _e2fcrwler.Logger.log('info', "Logging in ...");

  var e2fcrawler = new _e2fcrwler.E2FCrawler({
    url: '',
    output: 'json'
  });
  var response = e2fcrawler.postData({
    url: 'https://expressdev.ease2fly.com/api/auth/login',
    data: {
      email: "info@oxytra.com",
      pwd: "Sumit@12356"
    }
  });
  response.then(function (data) {
    _e2fcrwler.Logger.log("info", JSON.stringify(data.result));

    _e2fcrwler.Logger.log('info', JSON.stringify(e2fcrawler.finalData));

    var token = data.result.token;
    startProcess(token); //let runid = `${uuidv4()}_${moment().format("DD-MMM-YYYY HH:mm:ss.SSS")}`;
  }).catch(function (error) {
    _e2fcrwler.Logger.log("error", error);
  });
}

function startProcess(token) {
  _e2fcrwler.Logger.log('info', "Starting process ...");

  var e2fcrawler = new _e2fcrwler.E2FCrawler({
    url: '',
    output: 'json',
    token: token
  });
  var response = e2fcrawler.postData({
    url: 'https://expressdev.ease2fly.com/api/destinations/get-destinations-list',
    data: {
      usrId: 109,
      usrType: "N"
    },
    token: token
  });
  response.then(function (data) {
    _e2fcrwler.Logger.log("info", JSON.stringify(data.result));

    _e2fcrwler.Logger.log('info', JSON.stringify(e2fcrawler.finalData));

    var runid = "".concat(uuidv4(), "_").concat(moment().format("DD-MMM-YYYY HH:mm:ss.SSS"));
    datstore.saveCircleBatchData(runid, e2fcrawler.finalData, "", function (rrid) {
      datstore.finalization(rrid, function () {
        _e2fcrwler.Logger.log('info', 'Finished');

        process.removeAllListeners("unhandledRejection");
        process.removeAllListeners('exit');
        process.removeAllListeners();
        return;
      });
      return;
    });
  }).catch(function (error) {
    _e2fcrwler.Logger.log("error", error);
  });
}

var excutionStarted = false; // cron.schedule("*/20 * * * *", function() {
//     Logger.log("info", "Cron started");
//     if(excutionStarted) {
//         Logger.log("info", 'Previous process still running ...');
//         return false;
//     }

try {
  excutionStarted = true;
  process.on('unhandledRejection', function (reason, promise) {
    _e2fcrwler.Logger.log('info', 'Unhandled Rejection at:', reason);
  }); //startProcess();

  login();
} catch (e) {
  _e2fcrwler.Logger.log('error', e);
} finally {
  excutionStarted = false;
} // });
// app.listen("3232");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,